{
  "version": 3,
  "sources": ["../../../node_modules/primevue/utils/utils.esm.js"],
  "sourcesContent": ["class DomHandler {\n\n    static innerWidth(el) {\n        let width = el.offsetWidth;\n        let style = getComputedStyle(el);\n\n        width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\n        return width;\n    }\n\n    static width(el) {\n        let width = el.offsetWidth;\n        let style = getComputedStyle(el);\n\n        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\n        return width;\n    }\n\n    static getWindowScrollTop() {\n        let doc = document.documentElement;\n        return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n    }\n\n    static getWindowScrollLeft() {\n        let doc = document.documentElement;\n        return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n    }\n\n    static getOuterWidth(el, margin) {\n        if (el) {\n            let width = el.offsetWidth;\n\n            if (margin) {\n                let style = getComputedStyle(el);\n                width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n            }\n\n            return width;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    static getOuterHeight(el, margin) {\n        if (el) {\n            let height = el.offsetHeight;\n\n            if (margin) {\n                let style = getComputedStyle(el);\n                height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);\n            }\n\n            return height;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    static getClientHeight(el, margin) {\n        if (el) {\n            let height = el.clientHeight;\n\n            if (margin) {\n                let style = getComputedStyle(el);\n                height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);\n            }\n\n            return height;\n        } else {\n            return 0;\n        }\n    }\n\n    static getViewport() {\n        let win = window,\n            d = document,\n            e = d.documentElement,\n            g = d.getElementsByTagName('body')[0],\n            w = win.innerWidth || e.clientWidth || g.clientWidth,\n            h = win.innerHeight || e.clientHeight || g.clientHeight;\n\n        return {width: w, height: h};\n    }\n\n    static getOffset(el) {\n        var rect = el.getBoundingClientRect();\n\n        return {\n            top: rect.top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0),\n            left: rect.left + (window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0),\n        };\n    }\n\n    static index(element) {\n        let children = element.parentNode.childNodes;\n        let num = 0;\n        for (var i = 0; i < children.length; i++) {\n            if (children[i] === element) return num;\n            if (children[i].nodeType === 1) num++;\n        }\n        return -1;\n    }\n\n    static addMultipleClasses(element, className) {\n        if (element.classList) {\n            let styles = className.split(' ');\n            for (let i = 0; i < styles.length; i++) {\n                element.classList.add(styles[i]);\n            }\n\n        }\n        else {\n            let styles = className.split(' ');\n            for (let i = 0; i < styles.length; i++) {\n                element.className += ' ' + styles[i];\n            }\n        }\n    }\n\n    static addClass(element, className) {\n        if (element.classList)\n            element.classList.add(className);\n        else\n            element.className += ' ' + className;\n    }\n\n    static removeClass(element, className) {\n        if (element.classList)\n            element.classList.remove(className);\n        else\n            element.className = element.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n    }\n\n    static hasClass(element, className) {\n        if (element) {\n            if (element.classList)\n                return element.classList.contains(className);\n            else\n                return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);\n        }\n        \n        return false;\n    }\n\n    static find(element, selector) {\n        return element.querySelectorAll(selector);\n    }\n\n    static findSingle(element, selector) {\n        return element.querySelector(selector);\n    }\n\n    static getHeight(el) {\n        let height = el.offsetHeight;\n        let style = getComputedStyle(el);\n\n        height -= parseFloat(style.paddingTop) + parseFloat(style.paddingBottom) + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);\n\n        return height;\n    }\n\n    static getWidth(el) {\n        let width = el.offsetWidth;\n        let style = getComputedStyle(el);\n\n        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) + parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);\n\n        return width;\n    }\n\n    static absolutePosition(element, target) {\n        let elementDimensions = element.offsetParent ? { width: element.offsetWidth, height: element.offsetHeight } : this.getHiddenElementDimensions(element);\n        let elementOuterHeight = elementDimensions.height;\n        let elementOuterWidth = elementDimensions.width;\n        let targetOuterHeight = target.offsetHeight;\n        let targetOuterWidth = target.offsetWidth;\n        let targetOffset = target.getBoundingClientRect();\n        let windowScrollTop = this.getWindowScrollTop();\n        let windowScrollLeft = this.getWindowScrollLeft();\n        let viewport = this.getViewport();\n        let top, left;\n\n        if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {\n            top = targetOffset.top + windowScrollTop - elementOuterHeight;\n            element.style.transformOrigin = 'bottom';\n\n            if (top < 0) {\n                top = windowScrollTop;\n            }\n        }\n        else {\n            top = targetOuterHeight + targetOffset.top + windowScrollTop;\n            element.style.transformOrigin = 'top';\n        }\n\n        if (targetOffset.left + elementOuterWidth > viewport.width)\n            left = Math.max(0, targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth);\n        else\n            left = targetOffset.left + windowScrollLeft;\n\n        element.style.top = top + 'px';\n        element.style.left = left + 'px';\n    }\n\n    static relativePosition(element, target) {\n        let elementDimensions = element.offsetParent ? { width: element.offsetWidth, height: element.offsetHeight } : this.getHiddenElementDimensions(element);\n        const targetHeight = target.offsetHeight;\n        const targetOffset = target.getBoundingClientRect();\n        const viewport = this.getViewport();\n        let top, left;\n\n        if ((targetOffset.top + targetHeight + elementDimensions.height) > viewport.height) {\n            top = -1 * (elementDimensions.height);\n            element.style.transformOrigin = 'bottom';\n            if (targetOffset.top + top < 0) {\n                top = -1 * targetOffset.top;\n            }\n        }\n        else {\n            top = targetHeight;\n            element.style.transformOrigin = 'top';\n        }\n\n        if (elementDimensions.width > viewport.width) {\n            // element wider then viewport and cannot fit on screen (align at left side of viewport)\n            left = targetOffset.left * -1;\n        }\n        else if ((targetOffset.left + elementDimensions.width) > viewport.width) {\n            // element wider then viewport but can be fit on screen (align at right side of viewport)\n            left = (targetOffset.left + elementDimensions.width - viewport.width) * -1;\n        }\n        else {\n            // element fits on screen (align with target)\n            left = 0;\n        }\n\n        element.style.top = top + 'px';\n        element.style.left = left + 'px';\n    }\n\n    static getParents(element, parents = []) {\n        return element['parentNode'] === null ? parents : this.getParents(element.parentNode, parents.concat([element.parentNode]));\n    }\n\n    static getScrollableParents(element) {\n        let scrollableParents = [];\n\n        if (element) {\n            let parents = this.getParents(element);\n            const overflowRegex = /(auto|scroll)/;\n            const overflowCheck = (node) => {\n                let styleDeclaration = window['getComputedStyle'](node, null);\n                return overflowRegex.test(styleDeclaration.getPropertyValue('overflow')) || overflowRegex.test(styleDeclaration.getPropertyValue('overflowX')) || overflowRegex.test(styleDeclaration.getPropertyValue('overflowY'));\n            };\n\n            for (let parent of parents) {\n                let scrollSelectors = parent.nodeType === 1 && parent.dataset['scrollselectors'];\n                if (scrollSelectors) {\n                    let selectors = scrollSelectors.split(',');\n                    for (let selector of selectors) {\n                        let el = this.findSingle(parent, selector);\n                        if (el && overflowCheck(el)) {\n                            scrollableParents.push(el);\n                        }\n                    }\n                }\n\n                if (parent.nodeType !== 9 && overflowCheck(parent)) {\n                    scrollableParents.push(parent);\n                }\n            }\n        }\n\n        return scrollableParents;\n    }\n\n    static getHiddenElementOuterHeight(element) {\n        element.style.visibility = 'hidden';\n        element.style.display = 'block';\n        let elementHeight = element.offsetHeight;\n        element.style.display = 'none';\n        element.style.visibility = 'visible';\n\n        return elementHeight;\n    }\n\n    static getHiddenElementOuterWidth(element) {\n        element.style.visibility = 'hidden';\n        element.style.display = 'block';\n        let elementWidth = element.offsetWidth;\n        element.style.display = 'none';\n        element.style.visibility = 'visible';\n\n        return elementWidth;\n    }\n\n    static getHiddenElementDimensions(element) {\n        var dimensions = {};\n        element.style.visibility = 'hidden';\n        element.style.display = 'block';\n        dimensions.width = element.offsetWidth;\n        dimensions.height = element.offsetHeight;\n        element.style.display = 'none';\n        element.style.visibility = 'visible';\n\n        return dimensions;\n    }\n\n    static fadeIn(element, duration) {\n        element.style.opacity = 0;\n\n        var last = +new Date();\n        var opacity = 0;\n        var tick = function () {\n            opacity = +element.style.opacity + (new Date().getTime() - last) / duration;\n            element.style.opacity = opacity;\n            last = +new Date();\n\n            if (+opacity < 1) {\n                (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);\n            }\n        };\n\n        tick();\n    }\n\n    static fadeOut(element, ms) {\n        var opacity = 1,\n            interval = 50,\n            duration = ms,\n            gap = interval / duration;\n\n        let fading = setInterval(() => {\n            opacity -= gap;\n\n            if (opacity <= 0) {\n                opacity = 0;\n                clearInterval(fading);\n            }\n\n            element.style.opacity = opacity;\n        }, interval);\n    }\n\n    static getUserAgent() {\n        return navigator.userAgent;\n    }\n\n    static appendChild(element, target) {\n        if(this.isElement(target))\n            target.appendChild(element);\n        else if(target.el && target.elElement)\n            target.elElement.appendChild(element);\n        else\n            throw new Error('Cannot append ' + target + ' to ' + element);\n    }\n\n    static scrollInView(container, item) {\n        let borderTopValue = getComputedStyle(container).getPropertyValue('borderTopWidth');\n        let borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;\n        let paddingTopValue = getComputedStyle(container).getPropertyValue('paddingTop');\n        let paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;\n        let containerRect = container.getBoundingClientRect();\n        let itemRect = item.getBoundingClientRect();\n        let offset = (itemRect.top + document.body.scrollTop) - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;\n        let scroll = container.scrollTop;\n        let elementHeight = container.clientHeight;\n        let itemHeight = this.getOuterHeight(item);\n\n        if (offset < 0) {\n            container.scrollTop = scroll + offset;\n        }\n        else if ((offset + itemHeight) > elementHeight) {\n            container.scrollTop = scroll + offset - elementHeight + itemHeight;\n        }\n    }\n\n    static clearSelection() {\n        if(window.getSelection) {\n            if(window.getSelection().empty) {\n                window.getSelection().empty();\n            } else if(window.getSelection().removeAllRanges && window.getSelection().rangeCount > 0 && window.getSelection().getRangeAt(0).getClientRects().length > 0) {\n                window.getSelection().removeAllRanges();\n            }\n        }\n        else if(document['selection'] && document['selection'].empty) {\n            try {\n                document['selection'].empty();\n            } catch(error) {\n                //ignore IE bug\n            }\n        }\n    }\n\n    static calculateScrollbarWidth() {\n        if(this.calculatedScrollbarWidth != null)\n            return this.calculatedScrollbarWidth;\n\n        let scrollDiv = document.createElement(\"div\");\n        scrollDiv.className = \"p-scrollbar-measure\";\n        document.body.appendChild(scrollDiv);\n\n        let scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n        document.body.removeChild(scrollDiv);\n\n        this.calculatedScrollbarWidth = scrollbarWidth;\n\n        return scrollbarWidth;\n    }\n\n    static getBrowser() {\n        if(!this.browser) {\n            let matched = this.resolveUserAgent();\n            this.browser = {};\n\n            if (matched.browser) {\n                this.browser[matched.browser] = true;\n                this.browser['version'] = matched.version;\n            }\n\n            if (this.browser['chrome']) {\n                this.browser['webkit'] = true;\n            } else if (this.browser['webkit']) {\n                this.browser['safari'] = true;\n            }\n        }\n\n        return this.browser;\n    }\n\n    static resolveUserAgent() {\n        let ua = navigator.userAgent.toLowerCase();\n        let match = /(chrome)[ ]([\\w.]+)/.exec(ua) ||\n            /(webkit)[ ]([\\w.]+)/.exec(ua) ||\n            /(opera)(?:.*version|)[ ]([\\w.]+)/.exec(ua) ||\n            /(msie) ([\\w.]+)/.exec(ua) ||\n            (ua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua)) ||\n            [];\n\n        return {\n            browser: match[1] || \"\",\n            version: match[2] || \"0\"\n        };\n    }\n\n    static isVisible(element) {\n        return element.offsetParent != null;\n    }\n\n    static invokeElementMethod(element, methodName, args) {\n        (element)[methodName].apply(element, args);\n    }\n\n    static getFocusableElements(element) {\n        let focusableElements = DomHandler.find(element, `button:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden]),\n                [href][clientHeight][clientWidth]:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden]),\n                input:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden]), select:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden]),\n                textarea:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden]), [tabIndex]:not([tabIndex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden]),\n                [contenteditable]:not([tabIndex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])`\n            );\n\n        let visibleFocusableElements = [];\n        for (let focusableElement of focusableElements) {\n            if (getComputedStyle(focusableElement).display != \"none\" && getComputedStyle(focusableElement).visibility != \"hidden\")\n                visibleFocusableElements.push(focusableElement);\n        }\n\n        return visibleFocusableElements;\n    }\n\n    static isClickable(element) {\n        const targetNode = element.nodeName;\n        const parentNode = element.parentElement && element.parentElement.nodeName;\n\n        return (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' ||\n                parentNode == 'INPUT' || parentNode == 'BUTTON' || parentNode == 'A' ||\n                this.hasClass(element, 'p-button') || this.hasClass(element.parentElement, 'p-button') ||\n                this.hasClass(element.parentElement, 'p-checkbox') || this.hasClass(element.parentElement, 'p-radiobutton')\n        );\n    }\n\n    static applyStyle(element, style) {\n        if (typeof style === 'string') {\n            element.style.cssText = this.style;\n        }\n        else {\n            for (let prop in this.style) {\n                element.style[prop] = style[prop];\n            }\n        }\n    }\n\n    static isIOS() {\n        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window['MSStream'];\n    }\n\n    static isAndroid() {\n        return /(android)/i.test(navigator.userAgent);\n    }\n}\n\nclass ConnectedOverlayScrollHandler {\n\n    constructor(element, listener = () => {}) {\n        this.element = element;\n        this.listener = listener;\n    }\n\n    bindScrollListener() {\n        this.scrollableParents = DomHandler.getScrollableParents(this.element);\n        for (let i = 0; i < this.scrollableParents.length; i++) {\n            this.scrollableParents[i].addEventListener('scroll', this.listener);\n        }\n    }\n\n    unbindScrollListener() {\n        if (this.scrollableParents) {\n            for (let i = 0; i < this.scrollableParents.length; i++) {\n                this.scrollableParents[i].removeEventListener('scroll', this.listener);\n            }\n        }\n    }\n\n    destroy() {\n        this.unbindScrollListener();\n        this.element = null;\n        this.listener = null;\n        this.scrollableParents = null;\n    }\n}\n\nclass ObjectUtils {\n\n    static equals(obj1, obj2, field) {\n        if (field)\n            return (this.resolveFieldData(obj1, field) === this.resolveFieldData(obj2, field));\n        else\n            return this.deepEquals(obj1, obj2);\n    }\n\n    static deepEquals(a, b) {\n        if (a === b) return true;\n\n        if (a && b && typeof a == 'object' && typeof b == 'object') {\n            var arrA = Array.isArray(a)\n                , arrB = Array.isArray(b)\n                , i\n                , length\n                , key;\n\n            if (arrA && arrB) {\n                length = a.length;\n                if (length != b.length) return false;\n                for (i = length; i-- !== 0;)\n                    if (!this.deepEquals(a[i], b[i])) return false;\n                return true;\n            }\n\n            if (arrA != arrB) return false;\n\n            var dateA = a instanceof Date\n                , dateB = b instanceof Date;\n            if (dateA != dateB) return false;\n            if (dateA && dateB) return a.getTime() == b.getTime();\n\n            var regexpA = a instanceof RegExp\n                , regexpB = b instanceof RegExp;\n            if (regexpA != regexpB) return false;\n            if (regexpA && regexpB) return a.toString() == b.toString();\n\n            var keys = Object.keys(a);\n            length = keys.length;\n\n            if (length !== Object.keys(b).length)\n                return false;\n\n            for (i = length; i-- !== 0;)\n                if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n            for (i = length; i-- !== 0;) {\n                key = keys[i];\n                if (!this.deepEquals(a[key], b[key])) return false;\n            }\n\n            return true;\n        }\n\n        return a !== a && b !== b;\n    }\n\n    static resolveFieldData(data, field) {\n        if (data && Object.keys(data).length && field) {\n            if (this.isFunction(field)) {\n                return field(data);\n            }\n            else if(field.indexOf('.') === -1) {\n                return data[field];\n            }\n            else {\n                let fields = field.split('.');\n                let value = data;\n                for(var i = 0, len = fields.length; i < len; ++i) {\n                    if (value == null) {\n                        return null;\n                    }\n                    value = value[fields[i]];\n                }\n                return value;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    static isFunction(obj) {\n        return !!(obj && obj.constructor && obj.call && obj.apply);\n    }\n\n    static filter(value, fields, filterValue) {\n        var filteredItems = [];\n\n        if (value) {\n            for (let item of value) {\n                for (let field of fields) {\n                    if (String(this.resolveFieldData(item, field)).toLowerCase().indexOf(filterValue.toLowerCase()) > -1) {\n                        filteredItems.push(item);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return filteredItems;\n    }\n\n    static reorderArray(value, from, to) {\n        let target;\n        if (value && (from !== to)) {\n            if (to >= value.length) {\n                target = to - value.length;\n                while ((target--) + 1) {\n                    value.push(undefined);\n                }\n            }\n            value.splice(to, 0, value.splice(from, 1)[0]);\n        }\n    }\n\n    static findIndexInList(value, list) {\n        let index = -1;\n\n        if (list) {\n            for (let i = 0; i < list.length; i++) {\n                if (list[i] === value) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    static contains(value, list) {\n        if (value != null && list && list.length) {\n            for (let val of list) {\n                if (this.equals(value, val))\n                    return true;\n            }\n        }\n\n        return false;\n    }\n\n    static insertIntoOrderedArray(item, index, arr, sourceArr) {\n        if (arr.length > 0) {\n            let injected = false;\n            for (let i = 0; i < arr.length; i++) {\n                let currentItemIndex = this.findIndexInList(arr[i], sourceArr);\n                if (currentItemIndex > index) {\n                    arr.splice(i, 0, item);\n                    injected = true;\n                    break;\n                }\n            }\n\n            if (!injected) {\n                arr.push(item);\n            }\n        }\n        else {\n            arr.push(item);\n        }\n    }\n\n    static removeAccents(str) {\n        if (str && str.search(/[\\xC0-\\xFF]/g) > -1) {\n            str = str\n                    .replace(/[\\xC0-\\xC5]/g, \"A\")\n                    .replace(/[\\xC6]/g, \"AE\")\n                    .replace(/[\\xC7]/g, \"C\")\n                    .replace(/[\\xC8-\\xCB]/g, \"E\")\n                    .replace(/[\\xCC-\\xCF]/g, \"I\")\n                    .replace(/[\\xD0]/g, \"D\")\n                    .replace(/[\\xD1]/g, \"N\")\n                    .replace(/[\\xD2-\\xD6\\xD8]/g, \"O\")\n                    .replace(/[\\xD9-\\xDC]/g, \"U\")\n                    .replace(/[\\xDD]/g, \"Y\")\n                    .replace(/[\\xDE]/g, \"P\")\n                    .replace(/[\\xE0-\\xE5]/g, \"a\")\n                    .replace(/[\\xE6]/g, \"ae\")\n                    .replace(/[\\xE7]/g, \"c\")\n                    .replace(/[\\xE8-\\xEB]/g, \"e\")\n                    .replace(/[\\xEC-\\xEF]/g, \"i\")\n                    .replace(/[\\xF1]/g, \"n\")\n                    .replace(/[\\xF2-\\xF6\\xF8]/g, \"o\")\n                    .replace(/[\\xF9-\\xFC]/g, \"u\")\n                    .replace(/[\\xFE]/g, \"p\")\n                    .replace(/[\\xFD\\xFF]/g, \"y\");\n        }\n\n        return str;\n    }\n}\n\nfunction handler() {\n    let zIndexes = [];\n\n    const generateZIndex = (key, baseZIndex) => {\n        let lastZIndex = zIndexes.length > 0 ? zIndexes[zIndexes.length - 1] : { key, value: baseZIndex };\n        let newZIndex = lastZIndex.value + (lastZIndex.key === key ? 0 : baseZIndex) + 1;\n\n        zIndexes.push({ key, value: newZIndex });\n        return newZIndex;\n    };\n\n    const revertZIndex = (zIndex) => {\n        zIndexes = zIndexes.filter(obj => obj.value !== zIndex);\n    };\n\n    const getCurrentZIndex = () => {\n        return zIndexes.length > 0 ? zIndexes[zIndexes.length - 1].value : 0;\n    };\n\n    const getZIndex = (el) => {\n        return el ? parseInt(el.style.zIndex, 10) || 0 : 0\n    };\n\n    return {\n        get: getZIndex,\n        set: (key, el, baseZIndex) => {\n            if (el) {\n                el.style.zIndex = String(generateZIndex(key, baseZIndex));\n            }\n        },\n        clear: (el) => {\n            if (el) {\n                revertZIndex(getZIndex(el));\n                el.style.zIndex = '';\n            }\n        },\n        getCurrent: () => getCurrentZIndex()\n    };\n}\n\nvar ZIndexUtils = handler();\n\nvar lastId = 0;\n\nfunction UniqueComponentId (prefix = 'pv_id_') {\n    lastId++;\n    return `${prefix}${lastId}`;\n}\n\nfunction primebus() {\n\tconst allHandlers = new Map();\n\n\treturn {\n\t\ton(type, handler) {\n\t\t\tlet handlers = allHandlers.get(type);\n            if (!handlers)\n                handlers = [handler];\n            else\n                handlers.push(handler);\n\n            allHandlers.set(type, handlers);\n\t\t},\n\n\t\toff(type, handler) {\n\t\t\tlet handlers = allHandlers.get(type);\n\t\t\tif (handlers) {\n\t\t\t\thandlers.splice(handlers.indexOf(handler) >>> 0, 1);\n\t\t\t}\n\t\t},\n\n\t\temit(type, evt) {\n            let handlers = allHandlers.get(type);\n            if (handlers) {\n                handlers.slice().map((handler) => { handler(evt);});\n            }\n\t\t}\n\t};\n}\n\nexport { ConnectedOverlayScrollHandler, DomHandler, primebus as EventBus, ObjectUtils, UniqueComponentId, ZIndexUtils };\n"],
  "mappings": "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",
  "names": []
}
